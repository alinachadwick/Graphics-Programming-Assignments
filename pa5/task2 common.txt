#define PI 3.14156920

// returns the signed distance to a sphere from position p
float sdSphere(vec3 p, float r)
{
 	return length(p) - r;
}



////////////////////////////////////////////////
////// SIGNED DISTANCE FUNCTIONS FROM TASK 1////
////////////////////////////////////////////////


// returns the signed distance to a box from position p
float sdBox( vec3 p, vec3 half_bounds )
{
    // TODO
    vec3 a = abs(p) - half_bounds;
    return length(max(a,0.0)) + min(max(a.x,max(a.y,a.z)),0.0);
}

// returns the signed distance to a cylinder from position p
float sdCylinder(vec3 p, vec3 a, vec3 b, float r)
{
    // TODO
  vec3  dist1 = b - a;
  vec3  dist2 = p - a;
  float dot1 = dot(dist1,dist1);
  float dot2 = dot(dist2,dist1);
  float x = length(dist2*dot1-dist1*dot2) - r*dot1;
  float y = abs(dot2-dot1*0.5)-dot1*0.5;
  float x_sq = x*x;
  float y_sq = y*y*dot1;
  float d = (max(x,y)<0.0)?-min(x_sq,y_sq):(((x>0.0)?x_sq:0.0)+((y>0.0)?y_sq:0.0));
  return sign(d)*sqrt(abs(d))/dot1;
}

// returns the signed distance to a cone from position p
float sdCone(vec3 p, vec3 a, vec3 b, float ra, float rb)
{
    // TODO
  float pos  = rb-ra;
  float dist1 = dot(b-a,b-a);
  float dist2 = dot(p-a,p-a);
  float dist = dot(p-a,b-a)/dist1;
  float sq = sqrt( dist2 - dist*dist*dist1 );
  float ax = max(0.0,sq-((dist<0.5)?ra:rb));
  float ay = abs(dist-0.5)-0.5;
  float k = pos*pos + dist1;
  float c = clamp( (pos*(sq-ra)+dist*dist1)/k, 0.0, 1.0 );
  float bx = sq-ra - c*pos;
  float by = dist - c;
  float s = (bx<0.0 && ay<0.0) ? -1.0 : 1.0;
  return s*sqrt( min(ax*ax + ay*ay*dist1,
                     bx*bx + by*by*dist1) );
}

float sdLine(in vec2 p, in vec2 a, in vec2 b)
{
    // TODO
    vec2 dist1 = p-a, dist2 = b-a;
    float dot_prod = clamp( dot(dist1,dist2)/dot(dist2,dist2), 0.0, 1.0 );
    return length( dist1 - dist2*dot_prod );
}

float opSmoothUnion(float d1, float d2, float k)
{
    // TODO
    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );
    return mix( d2, d1, h ) - k*h*(1.0-h);
}

float opSmoothSubtraction(float d1, float d2, float k)
{
    // TODO
   float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );
    return mix( d2, -d1, h ) + k*h*(1.0-h);
}

float opSmoothIntersection( float d1, float d2, float k )
{
    // TODO
    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );
    return mix( d2, d1, h ) + k*h*(1.0-h);
}

float opRound(float d, float iso)
{
    // TODO
    return d - iso;
}

////////////////////////////////////////////////

// The animation which you see is of a 2D slice of a 3D object. The objects exist in [-1, 1] space
// and the slice is continuously moved along z=[-1,1] using a cosine. This method renders what the
// current z value is as a progress bar at the bottom of the animation for reference.
vec3 shade_progress_bar(vec2 p, vec2 res, float z)
{
    // have to take account of the aspect ratio
    float xpos = p.x * res.y / res.x;
    
    if (xpos > z - 0.01 && xpos < z + 0.01) return vec3(1.0);
    else return vec3(0.0);
}

vec3 shade(float sd)
{
    vec3 col = vec3(1.0) - sign(sd) * vec3(0.9,0.4,0.2);
    
    col *= 1.0 - exp(-6.0*abs(sd));
	col *= 0.8 + 0.2*cos(140.0*sd);
	col = mix( col, vec3(1.0, 0.0, 0.0), 1.0-smoothstep(0.0,0.02,abs(sd)) );
    
    return col * (1.0 - exp(-6.0*abs(sd)));
}



float sdf(vec3 world_p, float iTime) {
    // Assemble the scene
    float sphere_r = 1.0;

    return opSmoothUnion(sdSphere(world_p-vec3(0.5, 0., 0.), 1.), sdBox(world_p + vec3(0.5, 0., 0.), vec3(0.2)), 0.01);
    
    return 0.;

}
