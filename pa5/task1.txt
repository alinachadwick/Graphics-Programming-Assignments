#define SPHERE 0
#define BOX 1
#define LINE 2
#define CYLINDER 3
#define CYLINDER_TWO 4
#define CONE 5
#define CONE_TWO 6
#define SPHERE_UNION 7
#define SPHERE_INTERSECTION 8
#define SPHERE_DIFFERENCE 9
#define ROUNDED_BOX 10

// Change this to one of the "#define" values above to check your answers to each subtaks
int sdf_func = CONE; //change this accordingly

#define PI 3.14156920
#define ANIM_SPEED 0.35


// returns the signed distance to a sphere from position p
float sdSphere(vec3 p, float r)
{
 	return length(p) - r;
}


// returns the signed distance to a box from position p
float sdBox( vec3 p, vec3 half_bounds )
{
    vec3 a = abs(p) - half_bounds;
    return length(max(a,0.0)) + min(max(a.x,max(a.y,a.z)),0.0);
}

// returns the signed distance to a cylinder from position p
float sdCylinder(vec3 p, vec3 a, vec3 b, float r)
{
  vec3  dist1 = b - a;
  vec3  dist2 = p - a;
  float dot1 = dot(dist1,dist1);
  float dot2 = dot(dist2,dist1);
  float x = length(dist2*dot1-dist1*dot2) - r*dot1;
  float y = abs(dot2-dot1*0.5)-dot1*0.5;
  float x_sq = x*x;
  float y_sq = y*y*dot1;
  float d = (max(x,y)<0.0)?-min(x_sq,y_sq):(((x>0.0)?x_sq:0.0)+((y>0.0)?y_sq:0.0));
  return sign(d)*sqrt(abs(d))/dot1;
}

// returns the signed distance to a cone from position p
float sdCone(vec3 p, vec3 a, vec3 b, float ra, float rb)
{
  float pos  = rb-ra;
  float dist1 = dot(b-a,b-a);
  float dist2 = dot(p-a,p-a);
  float dist = dot(p-a,b-a)/dist1;
  float sq = sqrt( dist2 - dist*dist*dist1 );
  float ax = max(0.0,sq-((dist<0.5)?ra:rb));
  float ay = abs(dist-0.5)-0.5;
  float k = pos*pos + dist1;
  float c = clamp( (pos*(sq-ra)+dist*dist1)/k, 0.0, 1.0 );
  float bx = sq-ra - c*pos;
  float by = dist - c;
  float s = (bx<0.0 && ay<0.0) ? -1.0 : 1.0;
  return s*sqrt( min(ax*ax + ay*ay*dist1,
                     bx*bx + by*by*dist1) );
}

float sdLine(in vec2 p, in vec2 a, in vec2 b)
{
    vec2 dist1 = p-a, dist2 = b-a;
    float dot_prod = clamp( dot(dist1,dist2)/dot(dist2,dist2), 0.0, 1.0 );
    return length( dist1 - dist2*dot_prod );
}

float opSmoothUnion(float d1, float d2, float k)
{
    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );
    return mix( d2, d1, h ) - k*h*(1.0-h);
}

float opSmoothSubtraction(float d1, float d2, float k)
{
     float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );
    return mix( d2, -d1, h ) + k*h*(1.0-h);
}

float opSmoothIntersection( float d1, float d2, float k )
{
     float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );
    return mix( d2, d1, h ) + k*h*(1.0-h);
}

float opRound(float d, float iso)
{
    // TODO
     return d - iso;
}

//////////////////////////////////////////////////////////////////////////////////
// we will be replacing all of the code below with our own method(s). All of    //
// the changes you make will be disgarded. But feel free to change the main     //
// method to help debug your code.                                              //
//////////////////////////////////////////////////////////////////////////////////

// The animation which you see is of a 2D slice of a 3D object. The objects exist in [-1, 1] space
// and the slice is continuously moved along z=[-1,1] using a cosine. This method renders what the
// current z value is as a progress bar at the bottom of the animation for reference.
vec3 shade_progress_bar(vec2 p, vec2 res, float z)
{
    // have to take account of the aspect ratio
    float xpos = p.x * res.y / res.x;
    
    if (xpos > z - 0.01 && xpos < z + 0.01) return vec3(1.0);
    else return vec3(0.0);
}


vec3 shade(float sd)
{
    vec3 col = vec3(1.0) - sign(sd) * vec3(0.9,0.4,0.2);
    
    col *= 1.0 - exp(-6.0*abs(sd));
	col *= 0.8 + 0.2*cos(140.0*sd);
	col = mix( col, vec3(1.0, 0.0, 0.0), 1.0-smoothstep(0.0,0.02,abs(sd)) );
    
    return col;
}


void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Compute a 2D position based on fragCoord and resolution.
    // Put the origin at the center of the screen.
    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;
    // The z position is constant over the whole screen, so we are only visualizing a "slice" through the signed distance field.
    // We use the "iTime" variable to change which slice we show.
    float z = cos(ANIM_SPEED * iTime);
    // Finally put together the 2D position and the z-coordinate for the complete 3D position of this pixel.
    vec3 world_p = vec3(p, z);
	
    // Put the "progress bar" at the bottom of the screen to show which slice we are visualizing.
    if (p.y < -0.95)
        fragColor = vec4(shade_progress_bar(p, iResolution.xy, z), 1.0);
    else
    {
        // Assemble the scene
        float sphere_r = 1.0;
        
        vec3 box_b = vec3(0.5);
        
        vec2 line_a = vec2(0.5);
        vec2 line_b = vec2(-0.5);
        
        vec3 cylinder_a = vec3(0.0, -0.7, 0.0);
        vec3 cylinder_b = vec3(0.0, 0.7, 0.0);
        float cylinder_r = 0.7;
        
        vec3 cylinder_two_a = vec3(0.0, 0.0, -0.7);
        vec3 cylinder_two_b = vec3(0.0, 0.0, 0.7);
        float cylinder_two_r = 0.7;
        
        vec3 cone_a = vec3(0.0, -0.8, 0.0);
        vec3 cone_b = vec3(0.0, 0.8, 0.0);
        float cone_ra = 0.8;
        float cone_rb = 0.25;
        
        vec3 cone_two_a = vec3(0.0, 0.0, -0.8);
        vec3 cone_two_b = vec3(0.0, 0.0, 0.8);
        float cone_two_ra = 0.8;
        float cone_two_rb = 0.25;
        
        // Switch between the different primitives.
        if (sdf_func == SPHERE)
    		fragColor = vec4(shade(sdSphere(world_p, sphere_r)), 1.0);
        
        else if (sdf_func == BOX)
    		fragColor = vec4(shade(sdBox(world_p, box_b)), 1.0);
            
        else if (sdf_func == LINE)
        {
            // line is slightly different. Since this is a 2D object we will spin the camera along z instead of moving along the z axis
            vec2 line_world_p = vec2(cos(z) * p.x - sin(z) * p.y,
                                     sin(z) * p.x + cos(z) * p.y);
            
    		fragColor = vec4(shade(sdLine(line_world_p, line_a, line_b)), 1.0);
        }
        
        else if (sdf_func == CYLINDER)
    		fragColor = vec4(shade(sdCylinder(world_p, cylinder_a, cylinder_b, cylinder_r)), 1.0);
        else if (sdf_func == CYLINDER_TWO)
    		fragColor = vec4(shade(sdCylinder(world_p, cylinder_two_a, cylinder_two_b, cylinder_two_r)), 1.0);
        
        else if (sdf_func == CONE)
    		fragColor = vec4(shade(sdCone(world_p, cone_a, cone_b, cone_ra, cone_rb)), 1.0);
        else if (sdf_func == CONE_TWO)
    		fragColor = vec4(shade(sdCone(world_p, cone_two_a, cone_two_b, cone_two_ra, cone_two_rb)), 1.0);
        else if (sdf_func == SPHERE_UNION)
        {
            world_p[2] = 0.f;
    		float sdf = opSmoothUnion(sdSphere(world_p - vec3(0.4, 0.f, 0.f), 0.7),
                              		  sdSphere(world_p + vec3(0.4, 0.f, 0.f), 0.7),
                              		  0.5 * cos(ANIM_SPEED * iTime) + 0.5);
    
    	    fragColor = vec4(shade(sdf), 1.0);
        }
        else if (sdf_func == SPHERE_INTERSECTION)
        {
            world_p[2] = 0.f;
    		float sdf = opSmoothIntersection(sdSphere(world_p - vec3(0.4, 0.f, 0.f), 0.7),
                              		 		 sdSphere(world_p + vec3(0.4, 0.f, 0.f), 0.7),
                              		 		 0.5 * cos(ANIM_SPEED * iTime) + 0.5);
    
    		fragColor = vec4(shade(sdf), 1.0);
        }
        else if (sdf_func == SPHERE_DIFFERENCE)
        {
            world_p[2] = 0.f;
    		float sdf = opSmoothSubtraction(sdSphere(world_p - vec3(0.4, 0.f, 0.f), 0.7),
                              	    		sdSphere(world_p + vec3(0.4, 0.f, 0.f), 0.7),
                              	    		0.5 * cos(ANIM_SPEED * iTime) + 0.5);
    
            fragColor = vec4(shade(sdf), 1.0);
        }
        else if (sdf_func == ROUNDED_BOX)
        {
            world_p[2] = 0.f;
    		float sdf = sdBox(world_p, vec3(0.45));
    		sdf = opRound(sdf, 0.15 * cos(ANIM_SPEED * iTime) + 0.15);
    
    		fragColor = vec4(shade(sdf), 1.0);
        }
        else
            fragColor = vec4(0.0, 0.0, 0.0, 1.0);
    }
}