float sdSphere(vec3 p, float r)
{
 	return length(p) - r;
}
float opSmoothUnion(float d1, float d2, float k)
{
    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );
    return mix( d2, d1, h ) - k*h*(1.0-h);
}

float sdscene(vec3 p) {
  return opSmoothUnion(sdSphere(p-vec3(cos(iTime), sin(iTime), 0.), 0.5), sdSphere(p, 1.), 10.);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;

    float aspect = iResolution.x/iResolution.y;
    
    uv = (uv - 0.5) * vec2(aspect, 1) * 3.;
    
    
    vec3 rayOrigin = vec3(uv, 0.);
    vec3 rayDirection = vec3(0, 0, -1);  
    
    // Time varying pixel color
    const int max_steps = 500;
    const float step_size = 0.01;
    float t = 0.;
    vec3 p;
    for (int i = 0; i < max_steps; ++i){
      p = rayOrigin + t * rayDirection;
      float dist = sdscene(p);
      if (dist < 0.)
        break;
      t+= step_size;
    }
    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));

    // Output to screen
    fragColor = vec4(col,1.0);
}